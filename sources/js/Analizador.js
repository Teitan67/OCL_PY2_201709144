/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,28],$V2=[1,13],$V3=[1,14],$V4=[1,16],$V5=[1,26],$V6=[1,27],$V7=[1,34],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,35],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,29],$Vh=[1,30],$Vi=[1,39],$Vj=[1,2,6,11,14,25,26,28,48,49,51,57,58,59,60,61,78,81,82,83,84,86,88],$Vk=[1,41],$Vl=[1,54],$Vm=[1,49],$Vn=[1,50],$Vo=[1,56],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,2,6,8,9,11,14,25,26,28,38,39,42,48,49,50,51,53,54,55,57,58,59,60,61,78,81,82,83,84,86,88],$Vv=[17,24],$Vw=[2,39],$Vx=[1,77],$Vy=[1,74],$Vz=[1,73],$VA=[9,17,24,66,68,72,73,74,75,76,77,87],$VB=[2,40],$VC=[1,85],$VD=[1,86],$VE=[2,41],$VF=[2,42],$VG=[2,59],$VH=[1,88],$VI=[9,17,24,40,42,66,68,72,73,74,75,76,77,87],$VJ=[1,89],$VK=[1,90],$VL=[9,17,24,40,42,43,45,66,68,72,73,74,75,76,77,87],$VM=[1,92],$VN=[1,103],$VO=[1,98],$VP=[1,99],$VQ=[1,101],$VR=[1,109],$VS=[9,24],$VT=[2,67],$VU=[2,15],$VV=[1,126],$VW=[1,129],$VX=[1,131],$VY=[1,132],$VZ=[1,133],$V_=[1,134],$V$=[1,135],$V01=[1,136],$V11=[9,66],$V21=[1,137],$V31=[9,72,73,74,75,76,77],$V41=[1,139],$V51=[1,141],$V61=[9,66,68],$V71=[1,163],$V81=[1,164],$V91=[72,73,74,75,76,77],$Va1=[9,24,66,68],$Vb1=[1,210],$Vc1=[1,211],$Vd1=[2,84],$Ve1=[1,220];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"lsentencias":4,"main":5,"VOID":6,"MAIN":7,"PA":8,"PC":9,"LLA":10,"LLC":11,"sentencias":12,"funciones":13,"ID":14,"parametros":15,"tipo":16,"COMA":17,"variables":18,"stc_if":19,"consol":20,"stc_while":21,"stc_for":22,"n44":23,"PTCOMA":24,"BREAK":25,"CONTINUE":26,"llamada":27,"RETURN":28,"dato":29,"DO_WHILE":30,"switch":31,"v10":32,"v2":33,"v1":34,"v3":35,"IGUAL":36,"numeros":37,"TRUE":38,"FALSE":39,"SMAS":40,"n1":41,"SMENOS":42,"SPOR":43,"n2":44,"SDIV":45,"n3":46,"n4":47,"INCREMENTO":48,"DECREMENTO":49,"ENTERO":50,"DOUBLE":51,"llamado":52,"CADENA":53,"CARACTER":54,"HTML":55,"pentrada":56,"STRING":57,"CHAR":58,"INT":59,"BOOL":60,"IF":61,"condicion":62,"lprim":63,"ELSE":64,"lprim2":65,"O":66,"c1":67,"Y":68,"c2":69,"NOT":70,"comparador":71,"MYOR":72,"MNOR":73,"MNORI":74,"MYORI":75,"MISMOq":76,"Diferente":77,"CONSOLA":78,"PT":79,"WRITE":80,"WHILE":81,"FOR":82,"DO":83,"SWITCH":84,"casos":85,"CASE":86,"DOSPTS":87,"DEFAULT":88,"$accept":0,"$end":1},
terminals_: {2:"error",6:"VOID",7:"MAIN",8:"PA",9:"PC",10:"LLA",11:"LLC",14:"ID",17:"COMA",24:"PTCOMA",25:"BREAK",26:"CONTINUE",28:"RETURN",36:"IGUAL",38:"TRUE",39:"FALSE",40:"SMAS",42:"SMENOS",43:"SPOR",45:"SDIV",48:"INCREMENTO",49:"DECREMENTO",50:"ENTERO",51:"DOUBLE",53:"CADENA",54:"CARACTER",55:"HTML",57:"STRING",58:"CHAR",59:"INT",60:"BOOL",61:"IF",64:"ELSE",66:"O",68:"Y",70:"NOT",72:"MYOR",73:"MNOR",74:"MNORI",75:"MYORI",76:"MISMOq",77:"Diferente",78:"CONSOLA",79:"PT",80:"WRITE",81:"WHILE",82:"FOR",83:"DO",84:"SWITCH",86:"CASE",87:"DOSPTS",88:"DEFAULT"},
productions_: [0,[3,1],[3,1],[3,0],[5,7],[4,2],[4,1],[4,2],[4,1],[13,7],[13,8],[13,7],[13,8],[15,4],[15,2],[15,0],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,1],[12,3],[12,3],[12,2],[12,1],[12,1],[12,2],[12,2],[18,2],[18,1],[32,2],[34,2],[34,0],[33,3],[35,2],[35,0],[29,1],[29,1],[29,1],[37,3],[37,3],[37,1],[41,3],[41,3],[41,1],[44,3],[44,1],[46,2],[46,1],[23,2],[23,2],[23,2],[23,2],[47,1],[47,1],[47,1],[47,2],[47,1],[47,1],[47,1],[52,3],[56,3],[56,1],[56,0],[16,1],[16,1],[16,1],[16,1],[16,1],[19,8],[19,7],[19,8],[19,7],[63,9],[63,9],[63,8],[63,8],[63,1],[65,4],[65,3],[65,0],[62,3],[62,1],[62,3],[62,3],[67,3],[67,1],[67,3],[67,3],[69,2],[69,1],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[20,7],[20,6],[21,7],[21,6],[21,7],[21,6],[22,10],[22,10],[27,5],[30,7],[30,8],[30,7],[30,8],[31,6],[31,7],[85,4],[85,5],[85,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 traducir($$[$0]);
break;
case 4:
this.$="def main ():\n"+tablear($$[$0-1])+" \nif__name__=\"__main__\":\n main() ";
break;
case 5: case 7: case 38: case 51:
this.$=$$[$0-1]+$$[$0];
break;
case 6: case 8: case 40: case 41: case 42: case 61: case 62: case 63: case 68: case 69: case 70: case 71: case 72: case 81: case 86: case 90:
this.$=$$[$0];
break;
case 9: case 11:
 this.$="\ndef "+$$[$0-5]+"( "+$$[$0-3]+"): ";
break;
case 10: case 12:
this.$="\ndef "+$$[$0-6]+"("+$$[$0-4]+" ): "+tablear($$[$0-1])+"\n";
break;
case 13:
this.$=$$[$0-2]+" , "+$$[$0]; value.push($$[$0-2]); addVariable(value,$$[$0-3],_$[$0-3].first_line); value=[];
break;
case 14:
 this.$=$$[$0];value.push($$[$0]); addVariable(value,$$[$0-1],_$[$0-1].first_line); value=[]; 
break;
case 15: case 36: case 39: case 84:
this.$="";
break;
case 16: case 17: case 18: case 19: case 20: case 24: case 28: case 29:
this.$='\n'+$$[$0]; 
break;
case 21: case 22: case 23:
this.$='\n'+$$[$0-1]; 
break;
case 25: case 26:
this.$="\n"+$$[$0-2]+" "+$$[$0-1]
break;
case 27:
this.$="\n"+$$[$0-1]
break;
case 30: case 31:
this.$="";console.log("Modo panico activado!!");agregarError('Sintactico','Token no esperado, modo panico activado'+$$[$0-1],_$[$0-1].first_column,_$[$0].first_line); this.$="";
break;
case 32:
  addVariable(value,$$[$0-1],_$[$0-1].first_line); value=[];  this.$='var '+$$[$0];
break;
case 33:
 value=[]; this.$='\n'+$$[$0];
break;
case 34:
this.$=$$[$0-1];
break;
case 35: case 53: case 54: case 55: case 56: case 60:
this.$=$$[$0-1]+$$[$0]
break;
case 37:
 value.push($$[$0-2]); this.$=$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 43: case 44: case 46: case 47: case 49: case 64: case 65: case 95: case 96: case 97: case 98: case 99: case 100: case 101:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 45: case 48: case 50: case 52: case 57: case 58: case 59: case 66:
this.$=$$[$0]
break;
case 67:
this.$=""
break;
case 73: case 75:
	 this.$=$$[$0-7]+" "+$$[$0-5]+" : " +tablear($$[$0-2])+'\n' +$$[$0]+'\n'; 	
break;
case 74: case 76:
	 this.$=$$[$0-6]+" "+$$[$0-4]+" : \n" +$$[$01]+'\n'; 	
break;
case 77: case 78:
this.$='elif '+$$[$0-5] + tablear($$[$0-2])+'\n' +$$[$0]+'\n';
break;
case 79: case 80:
this.$='elif '+$$[$0-4] +':\n' +$$[$0]+'\n';
break;
case 82:
this.$=$$[$0-3] + tablear($$[$0-1]);
break;
case 83:
this.$=$$[$0-2] ;
break;
case 85: case 87: case 88: case 91: case 92:
this.$=$$[$0-2]+' or '+$$[$0-2];
break;
case 89:
this.$=$$[$0-2]+' and '+$$[$0-2];
break;
case 93:
this.$=' not '+$$[$0];
break;
case 94:
this.$= $$[$0];
break;
case 102:
this.$="print("+$$[$0-2]+")"
break;
case 103:
this.$="print( )"
break;
case 104: case 106:
this.$=$$[$0-6]+" "+$$[$0-4]+" : \n"+tablear($$[$0-1])+"";
break;
case 105: case 107:
this.$=$$[$0-5]+" "+$$[$0-3]+" : \n";
break;
case 108: case 109:
this.$="for "+"a"+" in a range( 1"+" , "+"10 ): \n"+tablear($$[$0-1])+"\n"
break;
case 110:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]
break;
case 111: case 113:
this.$="while true:\n"+"\ta=a+1\n\tif ("+$$[$0-1]+"):\n\t\t break\n";
break;
case 112: case 114:
this.$="while true:\n"+tablear($$[$0-5])+"\n\ta=a+1\n\tif ("+$$[$0-1]+"):\n\t\t break\n";
break;
case 115:
this.$="def switch(case , "+$$[$0-3]+"): \n\t switcher={\n"+""+"\n\t}"
break;
case 116:
this.$="def switch(case , "+$$[$0-4]+"): \n\t switcher={\n"+$$[$0-1]+"\n\t}"
break;
case 117:
this.$="\t\t"+$$[$0-2]+":"+tablear(tablear(tablear($$[$0])))+"\n";
break;
case 118:
this.$="\t\t"+$$[$0-3]+": \t\t\t"+tablear(tablear(tablear($$[$0-1])))+",\n"+$$[$0];
break;
case 119:
this.$="\t\t-1 : \t\t"+tablear(tablear(tablear($$[$0])))+"\n";
break;
}
},
table: [{1:[2,3],2:$V0,3:1,4:2,5:3,6:[1,6],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{1:[3]},{1:[2,1],2:$V0,6:$Vi,12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{1:[2,2]},o($Vj,[2,6]),o($Vj,[2,8]),{7:[1,40],14:$Vk},o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),{24:[1,42]},{24:[1,43]},{24:[1,44]},o($Vj,[2,24]),{8:$Vl,14:[1,51],23:46,24:[1,47],29:45,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,48:$V5,49:$V6,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},o($Vj,[2,28]),o($Vj,[2,29]),{11:[1,64],24:[1,63]},{14:[1,65],32:66,33:36},o($Vu,[2,33]),{8:[1,67]},{79:[1,68]},{8:[1,69]},{8:[1,70]},{14:[1,71]},{14:[1,72]},o($Vv,$Vw,{35:76,8:[1,75],36:$Vx,48:$Vy,49:$Vz}),{10:[1,78]},{8:[1,79]},{14:[2,68]},{14:[2,69]},{14:[2,70]},{14:[2,71]},{14:[2,72]},{24:[1,80]},o($Vj,[2,5]),o($Vj,[2,7]),{14:$Vk},{8:[1,81]},{8:[1,82]},o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),{24:[1,83]},{24:[1,84]},o($Vj,[2,27]),o($VA,$VB,{40:$VC,42:$VD}),o($VA,$VE),o($VA,$VF),o([24,40,42,43,45],$VG,{52:87,8:$VH,48:$Vy,49:$Vz}),o($VI,[2,45],{43:$VJ,45:$VK}),o($VL,[2,48]),{8:$Vl,14:$VM,37:91,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},o($VL,[2,50]),{14:$VM,47:93,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},o($VL,[2,52]),o($VL,[2,57]),o($VL,[2,58]),o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,63]),o($Vj,[2,30]),o($Vj,[2,31]),o($Vv,$Vw,{35:76,8:[1,94],36:$Vx}),o($Vu,[2,32]),{8:$VN,14:$VM,29:96,37:48,38:$VO,39:$VP,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,62:95,67:97,69:100,70:$VQ,71:102},{80:[1,104]},{8:$VN,14:$VM,29:106,37:48,38:$VO,39:$VP,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,62:105,67:97,69:100,70:$VQ,71:102},{14:$VR,16:108,18:107,32:21,33:36,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),{8:$Vl,9:$VT,14:$VM,29:111,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,56:110},{17:[1,113],24:[2,36],34:112},{8:$Vl,14:$VM,29:114,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{2:$V0,4:116,6:$Vi,11:[1,115],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{8:$Vl,14:$VM,29:117,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},o($Vu,[2,34]),{9:[1,118]},{9:$VU,15:119,16:120,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},o($Vj,[2,25]),o($Vj,[2,26]),{8:$Vl,14:$VM,41:121,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,41:122,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},o($VL,[2,60]),{8:$Vl,9:$VT,14:$VM,29:111,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,56:123},{8:$Vl,14:$VM,42:$Vo,44:124,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,42:$Vo,44:125,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{9:$VV,40:$VC,42:$VD},o($VL,$VG,{52:87,8:$VH}),o($VL,[2,51]),{9:$VU,15:127,16:120,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},{9:[1,128],66:$VW},{9:[1,130],72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},o($V11,[2,86],{68:$V21}),o($V31,$VE,{66:[1,138],68:$V41}),o($V31,$VF,{66:[1,140],68:$V51}),o($V61,[2,90]),{8:$VN,14:$VM,29:143,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,69:142,70:$VQ,71:102},o($V61,[2,94]),{8:$VN,14:$VM,29:143,37:145,38:$VO,39:$VP,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,62:144,67:97,69:100,70:$VQ,71:102},{8:[1,146]},{9:[1,147],66:$VW},{9:[1,148],72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},{8:$VN,14:$VM,29:143,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,71:149},{14:$VR,32:66,33:36},o($Vv,$Vw,{35:76,36:$Vx}),{9:[1,150]},{9:[2,66],17:[1,151]},{24:[2,37]},{14:$VR,33:152},o($Vv,[2,38]),{81:[1,153]},{2:$V0,6:$Vi,11:[1,154],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{9:[1,155]},{10:[1,156]},{9:[1,157]},{14:[1,158]},o($VI,[2,43],{43:$VJ,45:$VK}),o($VI,[2,44],{43:$VJ,45:$VK}),{9:[1,159]},o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,49]),{9:[1,160]},{10:[1,161]},{8:$VN,14:$VM,29:143,37:48,38:$V71,39:$V81,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,67:162,69:100,70:$VQ,71:102},{10:[1,165]},{8:$Vl,14:$VM,29:166,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,29:167,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,29:168,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,29:169,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,29:170,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$Vl,14:$VM,29:171,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{8:$VN,14:$VM,29:143,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,69:172,70:$VQ,71:102},{8:$VN,14:$VM,29:143,37:48,38:$V71,39:$V81,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,67:173,69:100,70:$VQ,71:102},{8:$VN,14:$VM,29:143,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,69:174,70:$VQ,71:102},{8:$VN,14:$VM,29:143,37:48,38:$V71,39:$V81,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,67:175,69:100,70:$VQ,71:102},{8:$VN,14:$VM,29:143,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,69:176,70:$VQ,71:102},o($V61,[2,93]),{72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},{9:[1,177],66:$VW},o($V91,$VB,{9:$VV,40:$VC,42:$VD}),{8:$Vl,9:[1,179],14:$VM,37:178,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{10:[1,180]},{10:[1,181]},{24:[1,182]},{24:[1,183]},{8:$Vl,9:$VT,14:$VM,29:111,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,56:184},{24:[2,35]},{8:[1,185]},{81:[1,186]},{10:[1,187]},{2:$V0,4:188,6:$Vi,12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{10:[1,189]},{9:[2,14],17:[1,190]},o($VL,[2,64]),{10:[1,191]},{2:$V0,4:192,6:$Vi,11:[1,193],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($V11,[2,85],{68:$V21}),o($V91,$VE,{68:$V41}),o($V91,$VF,{68:$V51}),{2:$V0,4:195,6:$Vi,11:[1,194],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Va1,[2,95]),o($Va1,[2,96]),o($Va1,[2,97]),o($Va1,[2,98]),o($Va1,[2,99]),o($Va1,[2,100]),o($V61,[2,89]),o($V11,[2,87],{68:$V21}),o($V61,[2,91]),o($V11,[2,88],{68:$V21}),o($V61,[2,92]),o($Va1,[2,101]),{9:[1,196],40:$VC,42:$VD},{24:[1,197]},{2:$V0,4:198,6:$Vi,11:[1,199],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,4:200,6:$Vi,11:[1,201],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{14:[1,204],16:108,18:203,23:202,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},o($Vj,[2,110]),{9:[2,65]},{8:$VN,14:$VM,29:206,37:48,38:$VO,39:$VP,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,62:205,67:97,69:100,70:$VQ,71:102},{8:[1,207]},{11:[1,208],85:209,86:$Vb1,88:$Vc1},{2:$V0,6:$Vi,11:[1,212],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,4:214,6:$Vi,11:[1,213],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{9:$VU,15:215,16:120,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb},{2:$V0,4:217,6:$Vi,11:[1,216],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,6:$Vi,11:[1,218],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,$Vd1,{63:219,65:221,64:$Ve1}),o($Vj,$Vd1,{65:221,63:222,64:$Ve1}),{2:$V0,6:$Vi,11:[1,223],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{24:[1,224]},o($Vj,[2,103]),{2:$V0,6:$Vi,11:[1,225],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,[2,105]),{2:$V0,6:$Vi,11:[1,226],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,[2,107]),{9:[1,227]},{9:[1,228]},o($Vv,$Vw,{35:76,36:$Vx,48:$Vy,49:$Vz}),{9:[1,229],66:$VW},{9:[1,230],72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},{8:$VN,14:$VM,29:232,37:48,38:$VO,39:$VP,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,62:231,67:97,69:100,70:$VQ,71:102},o($Vj,[2,115]),{11:[1,233]},{8:$Vl,14:$VM,29:234,37:48,38:$Vm,39:$Vn,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt},{87:[1,235]},{1:[2,4]},o($Vj,[2,9]),{2:$V0,6:$Vi,11:[1,236],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{9:[2,13]},o($Vj,[2,11]),{2:$V0,6:$Vi,11:[1,237],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,$Vd1,{65:221,63:238,64:$Ve1}),o($Vj,[2,76]),{10:[1,240],61:[1,239]},o($Vj,[2,81]),o($Vj,[2,74]),o($Vj,$Vd1,{65:221,63:241,64:$Ve1}),o($Vj,[2,102]),o($Vj,[2,104]),o($Vj,[2,106]),{10:[1,242]},{10:[1,243]},o($Vj,[2,111]),o($Vj,[2,113]),{9:[1,244],66:$VW},{9:[1,245],72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},o($Vj,[2,116]),{87:[1,246]},{2:$V0,4:247,6:$Vi,12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,[2,10]),o($Vj,[2,12]),o($Vj,[2,73]),{8:[1,248]},{2:$V0,4:249,6:$Vi,11:[1,250],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,[2,75]),{2:$V0,4:251,6:$Vi,12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,4:252,6:$Vi,12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,[2,112]),o($Vj,[2,114]),{2:$V0,4:253,6:$Vi,12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,6:$Vi,11:[2,119],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{8:$VN,14:$VM,29:255,37:48,38:$VO,39:$VP,41:52,42:$Vo,44:53,46:55,47:57,50:$Vp,51:$Vq,53:$Vr,54:$Vs,55:$Vt,62:254,67:97,69:100,70:$VQ,71:102},{2:$V0,6:$Vi,11:[1,256],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,[2,83]),{2:$V0,6:$Vi,11:[1,257],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,6:$Vi,11:[1,258],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,6:$Vi,11:[2,117],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:259,86:$Vb1,88:$Vc1},{9:[1,260],66:$VW},{9:[1,261],72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},o($Vj,[2,82]),o($Vj,[2,108]),o($Vj,[2,109]),{11:[2,118]},{10:[1,262]},{10:[1,263]},{2:$V0,4:264,6:$Vi,11:[1,265],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,4:266,6:$Vi,11:[1,267],12:4,13:5,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},{2:$V0,6:$Vi,11:[1,268],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,$Vd1,{65:221,63:269,64:$Ve1}),{2:$V0,6:$Vi,11:[1,270],12:37,13:38,14:$V1,16:20,18:7,19:8,20:9,21:10,22:11,23:12,25:$V2,26:$V3,27:15,28:$V4,30:17,31:18,32:21,33:36,48:$V5,49:$V6,51:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,78:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh},o($Vj,$Vd1,{65:221,63:271,64:$Ve1}),o($Vj,$Vd1,{65:221,63:272,64:$Ve1}),o($Vj,[2,79]),o($Vj,$Vd1,{65:221,63:273,64:$Ve1}),o($Vj,[2,80]),o($Vj,[2,77]),o($Vj,[2,78])],
defaultActions: {3:[2,2],31:[2,68],32:[2,69],33:[2,70],34:[2,71],35:[2,72],112:[2,37],152:[2,35],184:[2,65],212:[2,4],215:[2,13],259:[2,118]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//Contenido
	var tabs=0;
	var cValues=0;
	var tipo="nulo";
	var value =[] ;
	var contenido="";
//	function addVariable(){}
//	function traducir(){}
//	function agregarError(){}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 82;
break;
case 5:return 59;
break;
case 6:return 51;
break;
case 7:return 57;
break;
case 8:return 58;
break;
case 9:return 60;
break;
case 10:return 61;
break;
case 11:return 64;
break;
case 12:return 81;
break;
case 13:return 78;
break;
case 14:return 25;
break;
case 15:return 26;
break;
case 16:return 79;
break;
case 17:return 80;
break;
case 18:return 77;
break;
case 19:return 68;
break;
case 20:return 66;
break;
case 21:return 74;
break;
case 22:return 75;
break;
case 23:return 76;
break;
case 24:return 70;
break;
case 25:return 72;
break;
case 26:return 73;
break;
case 27:return 48;
break;
case 28:return 49;
break;
case 29:return 36;
break;
case 30:return 42;
break;
case 31:return 40;
break;
case 32:return 43;
break;
case 33:return 45;
break;
case 34:return 9;
break;
case 35:return 8;	
break;
case 36:return 10;	
break;
case 37:return 11;
break;
case 38:return 6;
break;
case 39:return 7;
break;
case 40:return 84;
break;
case 41:return 86;
break;
case 42:return 87;
break;
case 43:return 88;
break;
case 44:return 83;
break;
case 45:return 28;
break;
case 46:return 'DECIMAL';
break;
case 47:return 50;
break;
case 48:return 53;
break;
case 49:return 38;
break;
case 50:return 39;
break;
case 51:setHTML(yy_.yytext); return 55;
break;
case 52:return 54;
break;
case 53:return 24;
break;
case 54:return 17;	
break;
case 55:return 14;
break;
case 56:  agregarError('Lexico','Caracter no reconocido '+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:$)/i,/^(?:for\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:Console\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:\.)/i,/^(?:Write\b)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\{)/i,/^(?:\})/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?::)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:["][^"\n]*["])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:['][^']*['])/i,/^(?:['][a-zA-Z]['])/i,/^(?:;)/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}