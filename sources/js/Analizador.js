/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,11],$V2=[1,12],$V3=[1,22],$V4=[1,20],$V5=[1,21],$V6=[1,26],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,27],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,13,14,21,40,41,43,48,49,50,51,52,55,71,74,75],$Vg=[1,35],$Vh=[1,13,14,21,25,26,27,29,32,36,38,40,41,42,43,45,48,49,50,51,52,55,71,74,75],$Vi=[6,20],$Vj=[2,21],$Vk=[1,46],$Vl=[1,43],$Vm=[1,42],$Vn=[1,67],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,58],$Vs=[1,63],$Vt=[1,61],$Vu=[1,65],$Vv=[1,66],$Vw=[1,68],$Vx=[1,51],$Vy=[6,38],$Vz=[2,48],$VA=[1,78],$VB=[38,59],$VC=[1,79],$VD=[38,59,61],$VE=[6,20,38,59,61,65,66,67,68,69,70],$VF=[6,20,30,32,38,59,61,65,66,67,68,69,70],$VG=[1,89],$VH=[1,90],$VI=[6,20,30,32,33,35,38,59,61,65,66,67,68,69,70],$VJ=[6,38,59,61],$VK=[2,60],$VL=[1,135];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"lsentencias":4,"sentencias":5,"PTCOMA":6,"variables":7,"stc_if":8,"consol":9,"stc_while":10,"stc_for":11,"n44":12,"BREAK":13,"CONTINUE":14,"llamada":15,"tipo":16,"v10":17,"v2":18,"v1":19,"COMA":20,"ID":21,"v3":22,"IGUAL":23,"dato":24,"CARACTER":25,"TRUE":26,"FALSE":27,"numeros":28,"HTML":29,"SMAS":30,"n1":31,"SMENOS":32,"SPOR":33,"n2":34,"SDIV":35,"PA":36,"n3":37,"PC":38,"n4":39,"INCREMENTO":40,"DECREMENTO":41,"ENTERO":42,"DOUBLE":43,"llamado":44,"CADENA":45,"pentrada":46,"p1":47,"STRING":48,"CHAR":49,"INT":50,"BOOL":51,"IF":52,"condicion":53,"LLA":54,"LLC":55,"lprim":56,"ELSE":57,"lprim2":58,"O":59,"c1":60,"Y":61,"c2":62,"NOT":63,"comparador":64,"MYOR":65,"MNOR":66,"MNORI":67,"MYORI":68,"MISMOq":69,"Diferente":70,"CONSOLA":71,"PT":72,"WRITE":73,"WHILE":74,"FOR":75,"$accept":0,"$end":1},
terminals_: {2:"error",6:"PTCOMA",13:"BREAK",14:"CONTINUE",20:"COMA",21:"ID",23:"IGUAL",25:"CARACTER",26:"TRUE",27:"FALSE",29:"HTML",30:"SMAS",32:"SMENOS",33:"SPOR",35:"SDIV",36:"PA",38:"PC",40:"INCREMENTO",41:"DECREMENTO",42:"ENTERO",43:"DOUBLE",45:"CADENA",48:"STRING",49:"CHAR",50:"INT",51:"BOOL",52:"IF",54:"LLA",55:"LLC",57:"ELSE",59:"O",61:"Y",63:"NOT",65:"MYOR",66:"MNOR",67:"MNORI",68:"MYORI",69:"MISMOq",70:"Diferente",71:"CONSOLA",72:"PT",73:"WRITE",74:"WHILE",75:"FOR"},
productions_: [0,[3,1],[4,2],[4,1],[4,2],[5,1],[5,1],[5,1],[5,1],[5,1],[5,2],[5,2],[5,2],[5,1],[7,2],[7,1],[17,2],[19,2],[19,0],[18,3],[22,2],[22,0],[24,1],[24,1],[24,1],[24,1],[24,1],[28,3],[28,3],[28,1],[31,3],[31,3],[31,1],[34,3],[34,1],[37,2],[37,1],[12,2],[12,2],[12,2],[12,2],[39,1],[39,1],[39,1],[39,2],[39,1],[44,3],[46,2],[46,0],[47,2],[47,0],[16,1],[16,1],[16,1],[16,1],[16,1],[8,8],[56,9],[56,1],[58,4],[58,0],[53,3],[53,1],[60,3],[60,1],[62,2],[62,1],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[9,7],[10,7],[11,10],[11,10],[15,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 traducir($$[$0]);
break;
case 2: case 20: case 35:
this.$=$$[$0-1]+$$[$0];
break;
case 3: case 22: case 23: case 24: case 25: case 26: case 45: case 58: case 62: case 64:
this.$=$$[$0];
break;
case 4:
console.log("Modo panico activado!!");agregarError('Sintactico','Token no esperado, modo panico activado'+$$[$0-1],'',_$[$0].first_line); this.$="";
break;
case 5: case 6: case 7: case 8: case 9: case 13:
this.$='\n'+$$[$0]; 
break;
case 10: case 11: case 12:
this.$='\n'+$$[$0-1]; 
break;
case 14:
  addVariable(value,$$[$0-1],_$[$0-1].first_line); value=[];  this.$='var '+$$[$0];
break;
case 15:
 value=[]; this.$='\n\s'+$$[$0];
break;
case 16:
this.$=$$[$0-1];
break;
case 17: case 37: case 38: case 39: case 40: case 44: case 47: case 49:
this.$=$$[$0-1]+$$[$0]
break;
case 18: case 21: case 60:
this.$="";
break;
case 19:
 value.push($$[$0-2]); this.$=$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 27: case 28: case 30: case 31: case 33: case 46: case 67: case 68: case 69: case 70: case 71: case 72:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 29: case 32: case 34: case 36: case 41: case 42: case 43:
this.$=$$[$0]
break;
case 48: case 50:
this.$=""
break;
case 56:
	 this.$=$$[$0-7]+" "+$$[$0-5]+" : " +tablear($$[$0-2])+'\n' +$$[$0]+'\n'; 	
break;
case 57:
this.$='elif '+$$[$0-5] + tablear($$[$0-2])+'\n' +$$[$0]+'\n';
break;
case 59:
this.$=$$[$0-3] + tablear($$[$0-1]);
break;
case 61:
this.$=$$[$0-2]+' or '+$$[$0-2];
break;
case 63:
this.$=$$[$0-2]+' and '+$$[$0-2];
break;
case 65:
this.$=' not '+$$[$0];
break;
case 66:
this.$= $$[$0];
break;
case 73:
this.$="print("+$$[$0-2]+")"
break;
case 74:
this.$=$$[$0-6]+" "+$$[$0-4]+" : \n"+tablear($$[$0-1])+"";
break;
case 75: case 76:
this.$="for "+"a"+" in a range( 1"+" , "+"10 ): \n"+tablear($$[$0-1])+"\n"
break;
case 77:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},{1:[3]},{1:[2,1],5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},o($Vf,[2,3]),{6:[1,30]},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),{6:[1,31]},{6:[1,32]},{6:[1,33]},o($Vf,[2,13]),{17:34,18:28,21:$Vg},o($Vh,[2,15]),{36:[1,36]},{72:[1,37]},{36:[1,38]},{36:[1,39]},{21:[1,40]},{21:[1,41]},o($Vi,$Vj,{22:45,23:$Vk,36:[1,44],40:$Vl,41:$Vm}),{21:[2,51]},{21:[2,52]},{21:[2,53]},{21:[2,54]},{21:[2,55]},{6:[1,47]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vh,[2,14]),o($Vi,$Vj,{22:45,23:$Vk}),{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,53:48,60:49,62:50,63:$Vx,64:52},{73:[1,69]},{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,53:70,60:49,62:50,63:$Vx,64:52},{7:71,16:14,17:15,18:28,21:$Vg,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va},o($Vy,[2,37]),o($Vy,[2,38]),o($Vy,[2,39]),o($Vy,[2,40]),{21:$Vn,24:73,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,38:$Vz,39:64,42:$Vu,43:$Vv,45:$Vw,46:72},{6:[2,18],19:74,20:[1,75]},{21:$Vn,24:76,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},o($Vh,[2,16]),{38:[1,77],59:$VA},o($VB,[2,62],{61:$VC}),o($VD,[2,64]),{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,64:80},o($VD,[2,66]),{65:[1,81],66:[1,82],67:[1,83],68:[1,84],69:[1,85],70:[1,86]},o($VE,[2,22]),o($VE,[2,23]),o($VE,[2,24]),o($VE,[2,25],{30:[1,87],32:[1,88]}),o($VE,[2,26]),o($VF,[2,29],{33:$VG,35:$VH}),o($VI,[2,32]),{21:$Vn,32:$Vs,37:91,39:64,42:$Vu,43:$Vv,45:$Vw},o($VI,[2,34]),{21:$Vn,39:92,42:$Vu,43:$Vv,45:$Vw},o($VI,[2,36]),o($VI,[2,41]),o($VI,[2,42]),o($VI,[2,43],{44:93,36:[1,94]}),o($VI,[2,45]),{36:[1,95]},{38:[1,96],59:$VA},{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,64:97},{38:[1,98]},{20:[1,100],38:[2,50],47:99},{6:[2,19]},{18:101,21:$Vg},o($Vi,[2,20]),{54:[1,102]},{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,60:103,62:50,63:$Vx,64:52},{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,62:104,63:$Vx,64:52},o($VD,[2,65]),{21:$Vn,24:105,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,24:106,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,24:107,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,24:108,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,24:109,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,24:110,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,31:111,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,31:112,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,32:$Vs,34:113,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{21:$Vn,32:$Vs,34:114,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{38:[1,115]},o($VI,[2,35]),o($VI,[2,44]),{21:$Vn,24:73,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,38:$Vz,39:64,42:$Vu,43:$Vv,45:$Vw,46:116},{21:$Vn,24:117,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{54:[1,118]},{6:[1,119]},{6:[1,120]},{38:[2,47]},{21:$Vn,24:121,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw},{6:[2,17]},{2:$V0,4:122,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},o($VB,[2,61],{61:$VC}),o($VD,[2,63]),o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),o($VJ,[2,72]),o($VF,[2,27],{33:$VG,35:$VH}),o($VF,[2,28],{33:$VG,35:$VH}),o($VI,[2,30]),o($VI,[2,31]),o($VI,[2,33]),{38:[1,123]},{38:[1,124]},{2:$V0,4:125,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},{7:127,12:126,16:14,17:15,18:28,21:[1,128],40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va},o($Vf,[2,77]),{38:[2,49]},{5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,55:[1,129],71:$Vc,74:$Vd,75:$Ve},o($VI,[2,46]),{6:[1,130]},{5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,55:[1,131],71:$Vc,74:$Vd,75:$Ve},{38:[1,132]},{38:[1,133]},o($Vi,$Vj,{22:45,23:$Vk,40:$Vl,41:$Vm}),o($Vf,$VK,{56:134,58:136,57:$VL}),o($Vf,[2,73]),o($Vf,[2,74]),{54:[1,137]},{54:[1,138]},o($Vf,[2,56]),{52:[1,139],54:[1,140]},o($Vf,[2,58]),{2:$V0,4:141,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},{2:$V0,4:142,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},{36:[1,143]},{2:$V0,4:144,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},{5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,55:[1,145],71:$Vc,74:$Vd,75:$Ve},{5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,55:[1,146],71:$Vc,74:$Vd,75:$Ve},{21:$Vn,24:53,25:$Vo,26:$Vp,27:$Vq,28:57,29:$Vr,31:59,32:$Vs,34:60,36:$Vt,37:62,39:64,42:$Vu,43:$Vv,45:$Vw,53:147,60:49,62:50,63:$Vx,64:52},{5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,55:[1,148],71:$Vc,74:$Vd,75:$Ve},o($Vf,[2,75]),o($Vf,[2,76]),{38:[1,149],59:$VA},o($Vf,[2,59]),{54:[1,150]},{2:$V0,4:151,5:3,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,71:$Vc,74:$Vd,75:$Ve},{5:29,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,15:13,16:14,17:15,18:28,21:$V3,40:$V4,41:$V5,43:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,55:[1,152],71:$Vc,74:$Vd,75:$Ve},o($Vf,$VK,{58:136,56:153,57:$VL}),o($Vf,[2,57])],
defaultActions: {23:[2,51],24:[2,52],25:[2,53],26:[2,54],27:[2,55],74:[2,19],99:[2,47],101:[2,17],121:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//Contenido
	var tabs=0;
	var cValues=0;
	var tipo="nulo";
	var value =[] ;
	var contenido="";
//	function addVariable(){}
//	function traducir(){}
//	function agregarError(){}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 75;
break;
case 5:return 50;
break;
case 6:return 43;
break;
case 7:return 48;
break;
case 8:return 49;
break;
case 9:return 51;
break;
case 10:return 52;
break;
case 11:return 57;
break;
case 12:return 74;
break;
case 13:return 71;
break;
case 14:return 13;
break;
case 15:return 14;
break;
case 16:return 72;
break;
case 17:return 73;
break;
case 18:return 70;
break;
case 19:return 61;
break;
case 20:return 59;
break;
case 21:return 63;
break;
case 22:return 65;
break;
case 23:return 66;
break;
case 24:return 67;
break;
case 25:return 68;
break;
case 26:return 69;
break;
case 27:return 40;
break;
case 28:return 41;
break;
case 29:return 23;
break;
case 30:return 32;
break;
case 31:return 30;
break;
case 32:return 33;
break;
case 33:return 35;
break;
case 34:return 38;
break;
case 35:return 36;	
break;
case 36:return 54;	
break;
case 37:return 55;	
break;
case 38:return 'DECIMAL';
break;
case 39:return 42;
break;
case 40:return 45;
break;
case 41:return 26;
break;
case 42:return 27;
break;
case 43:setHTML(yy_.yytext); return 29;
break;
case 44:return 25;
break;
case 45:return 6;
break;
case 46:return 20;	
break;
case 47:return 21;
break;
case 48:  agregarError('Lexico','Caracter no reconocido '+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:$)/i,/^(?:for\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:Console\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:\.)/i,/^(?:Write\b)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:["][^"\n]*["])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:['][^']*['])/i,/^(?:['][a-zA-Z]['])/i,/^(?:;)/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}