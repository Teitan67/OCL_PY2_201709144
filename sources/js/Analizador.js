/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,13],$V2=[1,14],$V3=[1,16],$V4=[1,25],$V5=[1,26],$V6=[1,33],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,34],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,28],$Vg=[1,29],$Vh=[1,38],$Vi=[1,6,11,14,25,26,28,50,51,53,58,59,60,61,62,79,82,83,84,85,87,89],$Vj=[1,40],$Vk=[1,55],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,51],$Vp=[1,57],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,6,8,9,11,14,25,26,28,37,38,39,41,44,50,51,52,53,55,58,59,60,61,62,79,82,83,84,85,87,89],$Vu=[17,24],$Vv=[2,36],$Vw=[1,74],$Vx=[1,71],$Vy=[1,70],$Vz=[9,17,24,67,69,73,74,75,76,77,78,88],$VA=[2,58],$VB=[1,85],$VC=[9,17,24,42,44,67,69,73,74,75,76,77,78,88],$VD=[1,86],$VE=[1,87],$VF=[9,17,24,42,44,45,47,67,69,73,74,75,76,77,78,88],$VG=[1,89],$VH=[1,95],$VI=[1,102],$VJ=[9,24],$VK=[2,63],$VL=[2,14],$VM=[1,122],$VN=[9,67],$VO=[1,123],$VP=[9,67,69],$VQ=[9,24,67,69],$VR=[1,179],$VS=[1,180],$VT=[2,78],$VU=[1,189];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"lsentencias":4,"main":5,"VOID":6,"MAIN":7,"PA":8,"PC":9,"LLA":10,"LLC":11,"sentencias":12,"funciones":13,"ID":14,"parametros":15,"tipo":16,"COMA":17,"variables":18,"stc_if":19,"consol":20,"stc_while":21,"stc_for":22,"n44":23,"PTCOMA":24,"BREAK":25,"CONTINUE":26,"llamada":27,"RETURN":28,"dato":29,"DO_WHILE":30,"switch":31,"v10":32,"v2":33,"v1":34,"v3":35,"IGUAL":36,"CARACTER":37,"TRUE":38,"FALSE":39,"numeros":40,"HTML":41,"SMAS":42,"n1":43,"SMENOS":44,"SPOR":45,"n2":46,"SDIV":47,"n3":48,"n4":49,"INCREMENTO":50,"DECREMENTO":51,"ENTERO":52,"DOUBLE":53,"llamado":54,"CADENA":55,"pentrada":56,"p1":57,"STRING":58,"CHAR":59,"INT":60,"BOOL":61,"IF":62,"condicion":63,"lprim":64,"ELSE":65,"lprim2":66,"O":67,"c1":68,"Y":69,"c2":70,"NOT":71,"comparador":72,"MYOR":73,"MNOR":74,"MNORI":75,"MYORI":76,"MISMOq":77,"Diferente":78,"CONSOLA":79,"PT":80,"WRITE":81,"WHILE":82,"FOR":83,"DO":84,"SWITCH":85,"casos":86,"CASE":87,"DOSPTS":88,"DEFAULT":89,"$accept":0,"$end":1},
terminals_: {2:"error",6:"VOID",7:"MAIN",8:"PA",9:"PC",10:"LLA",11:"LLC",14:"ID",17:"COMA",24:"PTCOMA",25:"BREAK",26:"CONTINUE",28:"RETURN",36:"IGUAL",37:"CARACTER",38:"TRUE",39:"FALSE",41:"HTML",42:"SMAS",44:"SMENOS",45:"SPOR",47:"SDIV",50:"INCREMENTO",51:"DECREMENTO",52:"ENTERO",53:"DOUBLE",55:"CADENA",58:"STRING",59:"CHAR",60:"INT",61:"BOOL",62:"IF",65:"ELSE",67:"O",69:"Y",71:"NOT",73:"MYOR",74:"MNOR",75:"MNORI",76:"MYORI",77:"MISMOq",78:"Diferente",79:"CONSOLA",80:"PT",81:"WRITE",82:"WHILE",83:"FOR",84:"DO",85:"SWITCH",87:"CASE",88:"DOSPTS",89:"DEFAULT"},
productions_: [0,[3,1],[3,1],[5,7],[4,2],[4,1],[4,2],[4,1],[13,7],[13,8],[13,7],[13,8],[15,4],[15,2],[15,0],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,1],[12,3],[12,3],[12,2],[12,1],[12,1],[18,2],[18,1],[32,2],[34,2],[34,0],[33,3],[35,2],[35,0],[29,1],[29,1],[29,1],[29,1],[29,1],[40,3],[40,3],[40,1],[43,3],[43,3],[43,1],[46,3],[46,1],[48,2],[48,1],[23,2],[23,2],[23,2],[23,2],[49,1],[49,1],[49,1],[49,2],[49,1],[54,3],[56,2],[56,0],[57,2],[57,0],[16,1],[16,1],[16,1],[16,1],[16,1],[19,8],[19,7],[64,9],[64,8],[64,1],[66,4],[66,3],[66,0],[63,3],[63,1],[68,3],[68,1],[70,2],[70,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[20,7],[21,7],[21,6],[22,10],[22,10],[27,5],[30,7],[30,8],[31,6],[31,7],[86,4],[86,5],[86,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 traducir($$[$0]);
break;
case 3:
this.$="def main ():\n"+tablear($$[$0-1])+" \nif__name__=\"__main__\":\n main() ";
break;
case 4: case 6: case 35: case 50:
this.$=$$[$0-1]+$$[$0];
break;
case 5: case 7: case 37: case 38: case 39: case 40: case 41: case 60: case 75: case 80: case 82:
this.$=$$[$0];
break;
case 8: case 10:
 this.$="\ndef "+$$[$0-5]+"( "+$$[$0-3]+"): ";
break;
case 9: case 11:
this.$="\ndef "+$$[$0-6]+"("+$$[$0-4]+" ): "+tablear($$[$0-1])+"\n";
break;
case 12:
this.$=$$[$0-2]+" , "+$$[$0]; value.push($$[$0-2]); addVariable(value,$$[$0-3],_$[$0-3].first_line); value=[];
break;
case 13:
 this.$=$$[$0];value.push($$[$0]); addVariable(value,$$[$0-1],_$[$0-1].first_line); value=[]; 
break;
case 14: case 33: case 36: case 78:
this.$="";
break;
case 15: case 16: case 17: case 18: case 19: case 23: case 27: case 28:
this.$='\n'+$$[$0]; 
break;
case 20: case 21: case 22:
this.$='\n'+$$[$0-1]; 
break;
case 24: case 25:
this.$="\n"+$$[$0-2]+" "+$$[$0-1]
break;
case 26:
this.$="\n"+$$[$0-1]
break;
case 29:
  addVariable(value,$$[$0-1],_$[$0-1].first_line); value=[];  this.$='var '+$$[$0];
break;
case 30:
 value=[]; this.$='\n'+$$[$0];
break;
case 31:
this.$=$$[$0-1];
break;
case 32: case 52: case 53: case 54: case 55: case 59: case 62: case 64:
this.$=$$[$0-1]+$$[$0]
break;
case 34:
 value.push($$[$0-2]); this.$=$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 42: case 43: case 45: case 46: case 48: case 61: case 85: case 86: case 87: case 88: case 89: case 90:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 44: case 47: case 49: case 51: case 56: case 57: case 58:
this.$=$$[$0]
break;
case 63: case 65:
this.$=""
break;
case 71:
	 this.$=$$[$0-7]+" "+$$[$0-5]+" : " +tablear($$[$0-2])+'\n' +$$[$0]+'\n'; 	
break;
case 72:
	 this.$=$$[$0-6]+" "+$$[$0-4]+" : \n" +$$[$01]+'\n'; 	
break;
case 73:
this.$='elif '+$$[$0-5] + tablear($$[$0-2])+'\n' +$$[$0]+'\n';
break;
case 74:
this.$='elif '+$$[$0-4] +':\n' +$$[$0]+'\n';
break;
case 76:
this.$=$$[$0-3] + tablear($$[$0-1]);
break;
case 77:
this.$=$$[$0-2] ;
break;
case 79:
this.$=$$[$0-2]+' or '+$$[$0-2];
break;
case 81:
this.$=$$[$0-2]+' and '+$$[$0-2];
break;
case 83:
this.$=' not '+$$[$0];
break;
case 84:
this.$= $$[$0];
break;
case 91:
this.$="print("+$$[$0-2]+")"
break;
case 92:
this.$=$$[$0-6]+" "+$$[$0-4]+" : \n"+tablear($$[$0-1])+"";
break;
case 93:
this.$=$$[$0-5]+" "+$$[$0-3]+" : \n";
break;
case 94: case 95:
this.$="for "+"a"+" in a range( 1"+" , "+"10 ): \n"+tablear($$[$0-1])+"\n"
break;
case 96:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]
break;
case 97:
this.$="while true:\n"+"\ta=a+1\n\tif ("+$$[$0-1]+"):\n\t\t break\n";
break;
case 98:
this.$="while true:\n"+tablear($$[$0-5])+"\n\ta=a+1\n\tif ("+$$[$0-1]+"):\n\t\t break\n";
break;
case 99:
this.$="def switch(case , "+$$[$0-3]+"): \n\t switcher={\n"+""+"\n\t}"
break;
case 100:
this.$="def switch(case , "+$$[$0-4]+"): \n\t switcher={\n"+$$[$0-1]+"\n\t}"
break;
case 101:
this.$="\t\t"+$$[$0-2]+":"+tablear(tablear(tablear($$[$0])))+"\n";
break;
case 102:
this.$="\t\t"+$$[$0-3]+": \t\t\t"+tablear(tablear(tablear($$[$0-1])))+",\n"+$$[$0];
break;
case 103:
this.$="\t\t-1 : \t\t"+tablear(tablear(tablear($$[$0])))+"\n";
break;
}
},
table: [{3:1,4:2,5:3,6:[1,6],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{1:[3]},{1:[2,1],6:$Vh,12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{1:[2,2]},o($Vi,[2,5]),o($Vi,[2,7]),{7:[1,39],14:$Vj},o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),{24:[1,41]},{24:[1,42]},{24:[1,43]},o($Vi,[2,23]),{8:$Vk,14:[1,52],23:45,24:[1,46],29:44,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,50:$V4,51:$V5,52:$Vq,53:$Vr,55:$Vs},o($Vi,[2,27]),o($Vi,[2,28]),{14:[1,62],32:63,33:35},o($Vt,[2,30]),{8:[1,64]},{80:[1,65]},{8:[1,66]},{8:[1,67]},{14:[1,68]},{14:[1,69]},o($Vu,$Vv,{35:73,8:[1,72],36:$Vw,50:$Vx,51:$Vy}),{10:[1,75]},{8:[1,76]},{14:[2,66]},{14:[2,67]},{14:[2,68]},{14:[2,69]},{14:[2,70]},{24:[1,77]},o($Vi,[2,4]),o($Vi,[2,6]),{14:$Vj},{8:[1,78]},{8:[1,79]},o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{24:[1,80]},{24:[1,81]},o($Vi,[2,26]),o($Vz,[2,37]),o($Vz,[2,38]),o($Vz,[2,39]),o($Vz,[2,40],{42:[1,82],44:[1,83]}),o($Vz,[2,41]),o([24,42,44,45,47],$VA,{54:84,8:$VB,50:$Vx,51:$Vy}),o($VC,[2,44],{45:$VD,47:$VE}),o($VF,[2,47]),{14:$VG,44:$Vp,48:88,49:58,52:$Vq,53:$Vr,55:$Vs},o($VF,[2,49]),{14:$VG,49:90,52:$Vq,53:$Vr,55:$Vs},o($VF,[2,51]),o($VF,[2,56]),o($VF,[2,57]),o($VF,[2,60]),o($Vu,$Vv,{35:73,8:[1,91],36:$Vw}),o($Vt,[2,29]),{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,63:92,68:93,70:94,71:$VH,72:96},{81:[1,98]},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,63:99,68:93,70:94,71:$VH,72:96},{14:$VI,16:101,18:100,32:20,33:35,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va},o($VJ,[2,52]),o($VJ,[2,53]),o($VJ,[2,54]),o($VJ,[2,55]),{8:$Vk,9:$VK,14:$VG,29:104,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,56:103},{17:[1,106],24:[2,33],34:105},{8:$Vk,14:$VG,29:107,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{4:109,6:$Vh,11:[1,108],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{14:[1,110]},o($Vt,[2,31]),{9:[1,111]},{9:$VL,15:112,16:113,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va},o($Vi,[2,24]),o($Vi,[2,25]),{8:$Vk,14:$VG,43:114,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,43:115,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},o($VF,[2,59]),{8:$Vk,9:$VK,14:$VG,29:104,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,56:116},{8:$Vk,14:$VG,44:$Vp,46:117,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,44:$Vp,46:118,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{9:[1,119]},o($VF,$VA,{54:84,8:$VB}),o($VF,[2,50]),{9:$VL,15:120,16:113,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va},{9:[1,121],67:$VM},o($VN,[2,80],{69:$VO}),o($VP,[2,82]),{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,72:124},o($VP,[2,84]),{73:[1,125],74:[1,126],75:[1,127],76:[1,128],77:[1,129],78:[1,130]},{8:[1,131]},{9:[1,132],67:$VM},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,72:133},{14:$VI,32:63,33:35},o($Vu,$Vv,{35:73,36:$Vw}),{9:[1,134]},{9:[2,65],17:[1,136],57:135},{24:[2,34]},{14:$VI,33:137},o($Vu,[2,35]),{82:[1,138]},{6:$Vh,11:[1,139],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{9:[1,140]},{10:[1,141]},{9:[1,142]},{14:[1,143]},o($VC,[2,42],{45:$VD,47:$VE}),o($VC,[2,43],{45:$VD,47:$VE}),{9:[1,144]},o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,48]),{9:[1,145]},{10:[1,146]},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,68:147,70:94,71:$VH,72:96},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,70:148,71:$VH,72:96},o($VP,[2,83]),{8:$Vk,14:$VG,29:149,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,29:150,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,29:151,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,29:152,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,29:153,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,29:154,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{8:$Vk,14:$VG,29:155,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{10:[1,156]},{24:[1,157]},{24:[1,158]},{9:[2,62]},{8:$Vk,14:$VG,29:159,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{24:[2,32]},{8:[1,160]},{82:[1,161]},{10:[1,162]},{4:163,6:$Vh,12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{10:[1,164]},{9:[2,13],17:[1,165]},o($VF,[2,61]),{10:[1,166]},{4:167,6:$Vh,11:[1,168],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($VN,[2,79],{69:$VO}),o($VP,[2,81]),o($VQ,[2,85]),o($VQ,[2,86]),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),{9:[1,169]},{4:170,6:$Vh,11:[1,171],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{14:[1,174],16:101,18:173,23:172,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va},o($Vi,[2,96]),{9:[2,64]},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,63:175,68:93,70:94,71:$VH,72:96},{8:[1,176]},{11:[1,177],86:178,87:$VR,89:$VS},{6:$Vh,11:[1,181],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{4:183,6:$Vh,11:[1,182],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{9:$VL,15:184,16:113,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va},{4:186,6:$Vh,11:[1,185],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{6:$Vh,11:[1,187],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,$VT,{64:188,66:190,65:$VU}),{24:[1,191]},{6:$Vh,11:[1,192],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,[2,93]),{9:[1,193]},{9:[1,194]},o($Vu,$Vv,{35:73,36:$Vw,50:$Vx,51:$Vy}),{9:[1,195],67:$VM},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,63:196,68:93,70:94,71:$VH,72:96},o($Vi,[2,99]),{11:[1,197]},{8:$Vk,14:$VG,29:198,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs},{88:[1,199]},{1:[2,3]},o($Vi,[2,8]),{6:$Vh,11:[1,200],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{9:[2,12]},o($Vi,[2,10]),{6:$Vh,11:[1,201],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,$VT,{66:190,64:202,65:$VU}),o($Vi,[2,72]),{10:[1,204],62:[1,203]},o($Vi,[2,75]),o($Vi,[2,91]),o($Vi,[2,92]),{10:[1,205]},{10:[1,206]},o($Vi,[2,97]),{9:[1,207],67:$VM},o($Vi,[2,100]),{88:[1,208]},{4:209,6:$Vh,12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,[2,9]),o($Vi,[2,11]),o($Vi,[2,71]),{8:[1,210]},{4:211,6:$Vh,11:[1,212],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{4:213,6:$Vh,12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{4:214,6:$Vh,12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,[2,98]),{4:215,6:$Vh,12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{6:$Vh,11:[2,103],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{8:$Vk,14:$VG,29:97,37:$Vl,38:$Vm,39:$Vn,40:50,41:$Vo,43:53,44:$Vp,46:54,48:56,49:58,52:$Vq,53:$Vr,55:$Vs,63:216,68:93,70:94,71:$VH,72:96},{6:$Vh,11:[1,217],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,[2,77]),{6:$Vh,11:[1,218],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{6:$Vh,11:[1,219],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{6:$Vh,11:[2,101],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:220,87:$VR,89:$VS},{9:[1,221],67:$VM},o($Vi,[2,76]),o($Vi,[2,94]),o($Vi,[2,95]),{11:[2,102]},{10:[1,222]},{4:223,6:$Vh,11:[1,224],12:4,13:5,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},{6:$Vh,11:[1,225],12:36,13:37,14:$V0,16:19,18:7,19:8,20:9,21:10,22:11,23:12,25:$V1,26:$V2,27:15,28:$V3,30:17,31:18,32:20,33:35,50:$V4,51:$V5,53:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,79:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vi,$VT,{66:190,64:226,65:$VU}),o($Vi,$VT,{66:190,64:227,65:$VU}),o($Vi,[2,74]),o($Vi,[2,73])],
defaultActions: {3:[2,2],30:[2,66],31:[2,67],32:[2,68],33:[2,69],34:[2,70],105:[2,34],135:[2,62],137:[2,32],159:[2,64],181:[2,3],184:[2,12],220:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//Contenido
	var tabs=0;
	var cValues=0;
	var tipo="nulo";
	var value =[] ;
	var contenido="";
//	function addVariable(){}
//	function traducir(){}
//	function agregarError(){}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 83;
break;
case 5:return 60;
break;
case 6:return 53;
break;
case 7:return 58;
break;
case 8:return 59;
break;
case 9:return 61;
break;
case 10:return 62;
break;
case 11:return 65;
break;
case 12:return 82;
break;
case 13:return 79;
break;
case 14:return 25;
break;
case 15:return 26;
break;
case 16:return 80;
break;
case 17:return 81;
break;
case 18:return 78;
break;
case 19:return 69;
break;
case 20:return 67;
break;
case 21:return 71;
break;
case 22:return 73;
break;
case 23:return 74;
break;
case 24:return 75;
break;
case 25:return 76;
break;
case 26:return 77;
break;
case 27:return 50;
break;
case 28:return 51;
break;
case 29:return 36;
break;
case 30:return 44;
break;
case 31:return 42;
break;
case 32:return 45;
break;
case 33:return 47;
break;
case 34:return 9;
break;
case 35:return 8;	
break;
case 36:return 10;	
break;
case 37:return 11;
break;
case 38:return 6;
break;
case 39:return 7;
break;
case 40:return 85;
break;
case 41:return 87;
break;
case 42:return 88;
break;
case 43:return 89;
break;
case 44:return 84;
break;
case 45:return 28;
break;
case 46:return 'DECIMAL';
break;
case 47:return 52;
break;
case 48:return 55;
break;
case 49:return 38;
break;
case 50:return 39;
break;
case 51:setHTML(yy_.yytext); return 41;
break;
case 52:return 37;
break;
case 53:return 24;
break;
case 54:return 17;	
break;
case 55:return 14;
break;
case 56:  agregarError('Lexico','Caracter no reconocido '+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:$)/i,/^(?:for\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:Console\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:\.)/i,/^(?:Write\b)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\{)/i,/^(?:\})/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?::)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:["][^"\n]*["])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:['][^']*['])/i,/^(?:['][a-zA-Z]['])/i,/^(?:;)/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}